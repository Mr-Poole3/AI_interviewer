---
description: 
globs: 
alwaysApply: true
---
# MCP (Message Control & Processing) 服务调用规范

## 引言
本规范旨在明确 MCP (Message Control & Processing) 服务的统一调用标准与 SOP（Standard Operating Procedure），确保 Cursor 在与 MCP 服务交互过程中的一致性、可靠性与合规性。所有涉及 MCP 服务的开发与集成工作，均须严格遵守本规范。

## 1. MCP 服务接口概览

| 服务类别             | MCP 服务接口                                                                 | 主要功能                                                                                                                                                           |
|----------------------|------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 项目启动规划         | `enhance_startup_planning`                                                   | 新项目启动前的需求分析与规划支持。
| 项目分析         | `enhance_project_analysis`                                                   | 项目分析与项目文档的输出                                                                                                                                       |
| 新功能开发辅助       | `enhance_feature_innovation`                                                 | 针对新增功能的提示词增强，结合上下文和用户输入优化原始prompt。                                                                                                       |
| 文档更新             | `enhance_documentation_update`                                               | 基于代码变更，优化并更新项目文档。                                                                                                                                   |
| 方案固化             | `enhance_solution_solidification`                                            | 对现有解决方案进行优化与固化建议。                                                                                                                                   |
| 需求澄清与意图确认   | `enhance_clarifying_question`                                               | 主动识别用户输入中的模糊性、歧义或信息缺失，通过生成结构化的澄清式提问（可包含预设选项），引导用户明确真实意图，确保后续操作的准确性和有效性。                 |
| 代码修改方案评估     | `enhance_code_modification_plan`                                             | 在进行代码修改之前，评估修改范围和影响，生成详细的修改方案供用户确认，确保最小化修改原则，并在需要大范围修改时提供完整的影响分析和风险评估。                     |
| (通用)提示词优化     | (各具体业务场景下的提示词优化接口)                                           | 针对特定用户输入或任务优化提示词。                                                                                                                                   |
## 2. 强制调用场景与核心流程

Cursor **必须** 在以下场景中，按照指定流程调用相应的 MCP 服务。

### 2.1. 项目启动阶段
-   **触发条件：** 新项目初始化，需求分析完成后。
-   **调用服务：** `enhance_startup_planning`
-   **核心流程：**
    1.  调用 `enhance_startup_planning` MCP 服务，提交项目初步需求与上下文信息。
    2.  等待并接收 MCP 服务返回的项目规划建议。
    3.  基于 MCP 返回结果，完善项目启动计划。

### 2.2. 用户指令处理与提示词优化 (通用)
-   **触发条件：**
    -   接收到新的用户查询或指令时。
    -   生成任何代码建议之前。
    -   执行任何文件修改操作（代码生成、重构等）之前。
    -   执行任何可能产生副作用的系统命令之前。
-   **核心流程：**
    1.  针对用户输入或待执行任务，选择合适的提示词优化类 MCP 服务接口。
    2.  调用选定的 MCP 服务，传递原始用户输入及必要的上下文信息。
    3.  **必须**等待并采纳 MCP 服务返回的优化后提示词。
    4.  使用优化后的提示词执行后续操作（如代码生成、文件修改等）。

### 2.3. 代码变更与文档同步 (`enhance_documentation_update`)
-   **触发条件：** 任何代码变更（包括但不限于文件的新建、编辑、删除）完成之后，且**必须**在提交代码前。
-   **调用服务：** `enhance_documentation_update`
-   **核心流程：**
    1.  严禁在无实际代码变更的情况下调用本服务。
    2.  代码变更完成后，立即调用 `enhance_documentation_update` MCP 服务。
    3.  参数**必须**包含：变更文件路径列表 (`changed_files`)、项目 README 文件路径 (`readme_path`)、本次代码变更的摘要描述 (`code_changes`)等。
    4.  若涉及多文件批量变更，应在单次调用中传递所有相关的变更文件信息。
    5.  **必须**等待 MCP 服务返回优化后的文档内容。
    6.  **必须**基于 MCP 服务返回的完整内容更新项目文档（如 `README.md`）。严禁对 MCP 返回的文档内容进行任何形式的自行修改或删减。
    7.  代码变更与相应的文档更新**必须**成对出现并同步完成，此流程方视为合规。
-   **禁止行为：**
    -   跳过或延迟调用 `enhance_documentation_update` 服务。
    -   在未进行代码修改时调用此服务。

### 2.4. 解决方案固化
-   **调用服务：** `enhance_solution_solidification`

### 2.5. 新功能开发辅助
-   **调用服务：** `enhance_feature_innovation`

### 2.6. 需求澄清与意图确认 (调用 `enhance_clarifying_question`)
*   **核心原则：** **当且仅当对用户指令的准确含义、范围、目标或关键细节存在任何合理的不确定性时，必须优先调用 `enhance_clarifying_question` 服务进行澄清。基本判断准则：如果AI自己作为人类开发者，在执行前会向需求方追问以避免歧义，那么就应该调用此服务。宁可多问一次，不可臆测执行。**
*   **触发条件（包括但不限于）：**
    1.  **模糊指令：** 用户指令包含模糊词汇（如“优化一下”、“调整这个”、“处理数据”、“改得更好看”），缺乏明确的执行标准、衡量指标或具体操作对象。
    2.  **歧义指令：** 用户指令存在多种可能的合理解释或执行路径，不加以澄清可能导致结果不符合预期。
    3.  **信息缺失：** 用户指令缺少执行任务所必需的关键信息（例如：修改哪个函数？基于什么标准优化？数据输出到哪里？）。
    4.  **高风险操作前的确认：** 在执行任何可能产生重大影响（如多文件批量修改、删除操作、代码重构、部署行为）或不可逆转的操作之前，即使AI认为已理解，也建议通过此服务生成简短确认式问题（例如：“我将根据X逻辑重构Y文件中的Z函数，是否继续？”）。
    5.  **上下文不足的推断：** 当AI需要基于有限上下文进行推断才能执行指令时，应将推断的关键点作为问题向用户确认。
    6.  **用户表达与潜在意图可能不符：** AI根据对话历史或上下文分析，认为用户的字面指令可能未完全表达其真实需求或目标。
*   **调用服务：** `enhance_clarifying_question`
*   **核心流程：**
    1.  **暂停**当前任务的进一步解析或执行。
    2.  调用 `enhance_clarifying_question` MCP 服务，提交原始用户指令、已识别的模糊点/歧义点列表、以及必要的上下文信息（见3.1）。
    3.  MCP 服务将分析输入，生成一个或多个旨在消除歧义、补全信息或确认理解的澄清式问题。这些问题应：
        *   **具体且有针对性**，直指已识别的模糊点或缺失信息。
        *   **优先提供预定义的、结构化的选项**（例如，针对“优化代码”，选项可以是：“A. 提升运行时性能”，“B. 提高代码可读性与可维护性”，“C. 减少内存/资源消耗”，“D. 修复潜在BUG”），以引导用户快速、准确地做出决策。
        *   若无法提供选项，问题应清晰引导用户提供更明确的参数、范围或标准。
        *   避免开放式的、难以回答的或引导性过强的问题，除非旨在探索全新需求。
    4.  向用户清晰、简洁地展示 MCP 生成的澄清问题(组)及选项（若有）。
    5.  **必须等待并接收用户的明确回复。**
    6.  基于用户的回复，形成清晰、无歧义的执行指令或更新后的上下文。如果用户回复依然模糊或引入新的不确定性，可酌情再次调用 `enhance_clarifying_question`，或引导用户更详细地描述。
    7.  **只有在获得用户明确的、消除了关键不确定性的确认后，才能使用澄清后的信息继续执行后续操作。**
*   **禁止行为：**
    *   **严禁在对用户意图存在合理怀疑时，未经澄清即执行操作，特别是具有潜在破坏性或不可逆的操作。**
    *   严禁在未识别出具体模糊点或不确定性的情况下，泛泛地调用此服务。
    *   严禁自行臆测或基于低置信度推断替代用户澄清。

### 2.7. 代码修改方案评估与确认 (调用 `enhance_code_modification_plan`)
*   **核心原则：** 在进行任何代码修改或使用edit_file工具之前，必须首先调用 `enhance_code_modification_plan`评估修改的范围和影响。遵循最小化修改原则，如果需要进行大范围修改，必须先获得用户的明确确认。

*   **触发条件：**
    1.  **任何代码修改操作前：** 在执行任何代码修改之前，都应该先评估修改范围。
    2.  **大范围修改场景：** 当修改涉及以下任一情况时，必须调用此服务：
        - 修改涉及多个文件或模块
        - 需要重构现有代码结构
        - 会影响现有功能或API
        - 需要修改核心业务逻辑
    3.  **潜在风险评估：** 当修改可能影响系统稳定性、性能或其他关键特性时。

*   **调用服务：** `enhance_code_modification_plan`

*   **核心流程：**
    1.  在进行代码修改之前，调用 `enhance_code_modification_plan` 服务。
    2.  提供完整的上下文信息，包括修改需求、涉及文件、现有代码结构等。
    3.  服务将生成详细的修改评估报告，包含：
        - 修改范围说明
        - 影响分析
        - 具体修改步骤
        - 风险评估
        - 测试建议
    4.  向用户展示评估报告，等待用户确认。
    5.  只有在用户明确同意后，才能执行实际的代码修改。

*   **禁止行为：**
    - 在未经评估的情况下直接修改代码
    - 忽略评估结果直接进行修改
    - 在用户未确认的情况下执行大范围修改

## 3. 调用参数规范

### 3.1. 通用上下文参数 (`context`)
每次调用任何 MCP 服务时，请求中**必须**包含符合以下结构的 `context` 对象：
```json
{
    "file_type": "当前操作文件的主要语言或类型 (例如: 'python', 'typescript', 'markdown')",
    "current_file": "当前用户焦点所在或正在操作的文件绝对路径 (若适用)",
    "project_type": "项目所属的领域或框架类型 (例如: 'web_application', 'data_analysis', 'llm_agent')",
    "feature_type": "当前操作涉及的功能模块或特性分类 (例如: 'ui_component', 'api_endpoint', 'data_processing_pipeline')",
    "priority": "任务或请求的优先级 (例如: 'high', 'medium', 'low')"
}
```

### 3.2. 特定参数
调用 `enhance_documentation_update` 服务时，除上述通用 `context` 参数外，还**必须**提供以下额外参数：
```json
{
    "changed_files": ["<string: 发生变更的文件的绝对路径列表>"],
    "readme_path": "<string: 项目 README 文件的绝对路径>",
    "code_changes": "<string: 对本次代码变更的简洁、准确的摘要描述>"
}
```
调用 `enhance_clarifying_question` 服务时，除上述通用 `context` 参数外，还**必须**提供以下额外参数：
```json
{
     "existing_features": [], // 可选，现有相关功能列表 (示例使用空列表)
     "technical_constraints": {}, // 可选，技术约束条件 (示例使用空对象)
     "question": "<string: 必选，需要确认，澄清的用户问题>"
}
```
调用 `enhance_code_modification_plan` 服务时，除上述通用 `context` 参数外，还**必须**提供以下额外参数：
```json
{
    "files_to_modify": ["<string: 计划修改的文件列表>"],
    "modification_type": "<string: 修改类型（'minimal' 或 'large_scale'）>",
    "code_snippets": {
        "<file_path>": "<string: 需要修改的代码片段>"
    },
    "dependencies": ["<string: 相关依赖列表>"]
}
```

## 4. 强制执行细则

### 4.1. 调用时机与顺序
-   严禁在任何规定场景下跳过或遗漏 MCP 服务的调用。
-   **必须**严格按照本规范定义的顺序和时机执行调用。
-   **必须**等待 MCP 服务成功响应后，方可继续执行依赖其结果的后续操作。

### 4.2. 参数完整性与准确性
-   严禁省略任何在“调用参数规范”中声明为必需的参数。
-   所有参数值**必须**真实、准确地反映当前的操作上下文，不得使用占位符、伪造或不相关的数据。
-   对于可选参数，建议尽可能完整提供，以期获得更佳的 MCP 服务效果。

### 4.3. 响应结果处理
-   对于提示词优化类服务，**必须**采纳并使用 MCP 服务返回的优化后提示词。
-   对于文档更新 (`enhance_documentation_update`)，**必须**严格使用 MCP 返回的完整内容更新文档，严禁任何形式的自行修改或节选。
-   不得擅自修改、忽略或曲解 MCP 服务的任何优化建议或返回结果。

### 4.4. 失败处理
-   若 MCP 服务调用失败（例如：网络错误、服务内部错误），**必须**将此失败情况及相关错误信息明确报告给用户。
-   应提供必要的错误上下文，辅助用户理解问题或进行重试。

## 5. 代码固化区域保护规则

在 Cursor 进行代码编辑或重构操作时：
-   若目标代码文件中存在由特定注释标识符界定的“代码固化区域”，Cursor **严禁**修改该区域内的任何代码内容。
-   **必须**向用户明确提示此区域的不可修改性。
-   用户仅可修改固化区域以外的代码。
-   代码固化区域通过以下成对的注释标识符进行定义：
    ```
    // @fixed_implementation_start (或适用于对应语言的注释符号)
    [此区域内的代码片段内容不可修改]
    // @fixed_implementation_end (或适用于对应语言的注释符号)
    ```

## 6. 遵从性验证机制

为确保本规范的有效执行，Cursor 在处理每个涉及 MCP 调用的用户请求或自动化流程中，**必须**内置以下验证步骤：
-   **调用时机验证：** 确认当前操作场景是否满足规定的 MCP 服务强制调用时机。
-   **参数合规性验证：** 校验请求参数是否完整、格式是否正确、参数值是否有效且符合实际上下文。
-   **服务接口选择验证：** 确保根据当前任务目标选择了正确的 MCP 服务接口。
-   **响应处理验证：** 确认 MCP 服务的响应（如优化后的提示词、文档内容）已按照规范被正确采纳和处理。

## 7. 最佳实践

### 7.1. 参数构建
-   **优先使用用户显式提供的信息：** 直接采纳用户在查询或指令中明确给出的信息构建参数。
-   **基于上下文合理推断：** 当信息不完整时，可依据当前编辑环境、项目结构等上下文信息审慎推断缺失的参数值。
-   **确保准确性与相关性：** 所有构建的参数值均需与当前操作高度相关且准确无误。

### 7.2. 错误处理与用户反馈
-   **即时通知服务不可用：** 当 MCP 服务不可用、连接超时或返回严重错误码时，应立即将此情况清晰、友好地通知用户。
-   **提供明确错误指引：** 错误信息应包含必要的诊断信息，并在可能的情况下，向用户提供针对错误的建议解决方案或后续操作指引。

### 7.3. 性能优化
-   **避免不必要的重复调用：** 优化调用逻辑，避免在同一处理流程中对相同目的、相同输入的 MCP 服务进行冗余调用。
-   **高效参数构建：** 确保参数获取与构建过程本身高效，避免因参数准备引入不必要的性能开销。

### 7.4. 智能澄清与用户体验 (新增)
*   **把握澄清的度：** 虽然强调必要时澄清，但也应避免对用户每个微小指令都进行过度提问。AI应基于上下文、指令的明确程度以及操作的潜在风险，智能判断澄清的必要性。目标是在确保准确性的前提下，最大化交互效率。
*   **提问质量：** `enhance_clarifying_question` 服务本身应致力于生成高质量的问题。问题应简洁明了，易于理解，选项（如果提供）应互斥且尽可能完备（MECE原则）。
*   **循序渐进澄清：** 对于复杂或多方面的模糊需求，可以采用分步澄清策略。先针对最核心或最高层级的不确定点提问，待明确后再针对次级细节提问。
*   **记录与学习（理想化）：** （若系统支持）记录澄清交互的过程和结果，用于未来优化澄清策略或对特定用户的提问偏好进行个性化调整。

## 8. 规范更新与维护

本规范将随 MCP 服务的迭代升级而持续更新。所有相关开发、测试及维护团队：
-   **必须**定期查阅并获取最新版本的服务调用规范。
-   在新版本规范发布后，**必须**及时评审并规划 Cursor 调用逻辑的适配与更新工作。
-   若规范变更对依赖 MCP 服务的下游模块、开发者或最终用户交互体验产生显著影响，需通过适当渠道（如更新日志、开发者文档）进行明确通告。

## 9. 其它
*   对于复杂方案设计，**必须**先向用户提供多个初步方案选项，并**经过用户明确选择或确认**后再进行具体的代码生成或修改。此过程可结合 `enhance_clarifying_question` 服务来构建方案选项和确认问题。
*   **重申：** **任何时候，如果AI对用户的需求、指令或说明的理解存在不确定性或多种可能性，导致无法确保后续操作100%符合用户预期，都必须停止臆测，并优先使用 `enhance_clarifying_question` 工具向用户提问以获得明确指引。** 不要妄下结论，不要猜测用户可能想要什么，除非这种猜测的风险极低且易于撤销。
**If requirements or instructions are unclear use the tool enhance_clarifying_question to ask clarifying questions to the user before proceeding, do not make assumptions. Whenever possible, present the user with predefined options through the enhance_clarifying_question MCP tool to facilitate quick decisions.**

---